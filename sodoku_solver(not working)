from itertools import product

puzzle = [[5,3,0,4,7,0,0,0,0],
          [6,0,0,1,9,5,0,0,0],
          [0,9,8,0,0,0,0,6,0],
          [8,0,0,0,6,0,0,0,3],
          [4,0,0,8,0,3,0,0,1],
          [7,0,0,0,2,0,0,0,6],
          [0,6,0,0,0,0,2,8,0],
          [0,0,0,4,1,9,0,0,5],
          [0,0,0,0,8,0,0,7,9]]


def solve_soduku(puzzle):
    length = len(puzzle)
    # Uses the product to loop over every possible coordinate in the puzzle, adaptable for larger puzzles
    for (row,column) in product(range(0,9), repeat=2):
        if puzzle[row][column] == 0:
            for num in range(1,10):
                allowed = True
                for i in range(0,9):
                    if num in (puzzle[i][column], puzzle[row][i]):
                        allowed = False
                        break
                for (i,j) in product(range(0,3), repeat=2):
                    if puzzle[row - row % 3 + i][column - column % 3 + j] == num:
                        allowed = False 
                        break 
                if allowed: 
                    puzzle[row][column] = num
                    if trial := solve_soduku(puzzle):
                        return trial
                    puzzle[row][column] = 0
            return False 
    return puzzle

print(solve_soduku(puzzle))




'''
def solve(puzzle):
    y = 0 
    index = 0
    length = len(puzzle)
    square = []
    square_3d = []

    for rows in range(length):
        if length % 3 == 0:
            width = length / 3
        else:
            print("Puzzle out of range")
            quit()
        
    width = int(width)

    for x in range(width):
        square.append([])

        for y in range(width):
            square[x].append([])

            square_len = len(square)

            for i in range(square_len):
                square[x][y].append(puzzle[i][i])
        
    print(square)

solve(puzzle)
'''